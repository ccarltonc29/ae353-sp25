import numpy as np
import sympy as sym
np.set_printoptions(suppress=True)

q, v, tau = sym.symbols('q, v, tau')
f = sym.Matrix([v, -3*sym.sin(q) + tau])

q_e = 0.5*np.pi
v_e = 0.
tau_e = 3.

f_num = sym.lambdify([q, v, tau], f)
A_num = sym.lambdify((q, v, tau), f.jacobian([q, v]))
B_num = sym.lambdify([q, v, tau], f.jacobian([tau]))

A = A_num(q_e, v_e, tau_e)
B = B_num(q_e, v_e, tau_e)

A = A.astype(float)
B = B.astype(float)

print(A)
print(B)



m, n, tau = sym.symbols('m, n, tau')
f = sym.Matrix([(4*n - 1 + tau)/9, n])

m_e = 1.
n_e = 0.
tau_e = 1.

f_num = sym.lambdify([m, n, tau], f)
A_num = sym.lambdify((m, n, tau), f.jacobian([n, m]))
B_num = sym.lambdify([m, n, tau], f.jacobian([tau]))

A = A_num(m_e, n_e, tau_e)
B = B_num(m_e, n_e, tau_e)

A = A.astype(float)
B = B.astype(float)

print(A.tolist())
print(B.tolist())




t0, t1, b = sym.symbols('t0, t1, b')
f = sym.Matrix([(5*t1 - 3*t0 - 5 + b)/5, t1])

t0e = 1.
t1e = 0.
be = 8.

A_num = sym.lambdify([t0, t1, b], f.jacobian([t1, t0]))
B_num = sym.lambdify([t0, t1, b], f.jacobian([b]))

A = A_num(t0e, t1e, be)
B = B_num(t0e, t1e, be)

A = A.astype(float)
B = B.astype(float)

print(A.tolist())
print(B.tolist())

w, q, f = sym.symbols('w, q, f')
xx = sym.Matrix([-4*q - 10*w - 7*w**3 + f, q])

we = 3.
qe = 0.
fe = 219.

A_num = sym.lambdify([w, q, f], xx.jacobian([q, w]))
B_num = sym.lambdify([w, q, f], xx.jacobian([f]))

A = A_num(we, qe, fe)
B = B_num(we, qe, fe)

A = A.astype(float)
B = B.astype(float)

print(A.tolist())
print(B.tolist())


r, q, f = sym.symbols('r, q, f')
xx = sym.Matrix([q, -10*q - 10*sym.sin(r) + f])

re = 0.
qe = 0.
fe = 0.

A_num = sym.lambdify([r, q, f], xx.jacobian([r, q]))
B_num = sym.lambdify([r, q, f], xx.jacobian([f]))

A = A_num(re, qe, fe)
B = B_num(re, qe, fe)

A = A.astype(float)
B = B.astype(float)

print(A.tolist())
print(B.tolist())